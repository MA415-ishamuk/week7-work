---
title: "class10-work"
author: "isha mukundan"
format: html
editor: visual
---

## Midterm Project

Dataset: USDA-NASS Strawberries

```{r}
#| label: load libraries
#| warning: false
#| message: false

library(knitr)  
library(kableExtra)
library(tidyverse)
library(stringr)
```

```{r}
#| label: read data

strawberry <- read_csv("straw1.csv", col_names = TRUE)

glimpse(strawberry)
```

Check what all types of values are under Program (if only Survey it can be removed).

Check what all types of values are under Geo Level (if only State it can be removed).

Check if Week Ending, Ag District, Ag District Code, County, County ANSI, Zip Code, Region, Watershed, and CV are all NA?

```{r}
unique(strawberry$Program)

unique(strawberry$`Geo Level`)

unique(strawberry$`Week Ending`)
unique(strawberry$`Ag District`)
unique(strawberry$`Ag District Code`)
```

Write a function to determine what values are present in each column.

```{r}
strawberry_vals <- list() # initialize strawberry_vals as a list

for(i in 1:dim(strawberry)[2]) {
  strawberry_vals[[i]] <- unique(strawberry[,i])
}
```

Write a function to remove all of the columns that only have NA as a value. Would need to add more lines to get rid of the other that columns that have only one value.

```{r}
na_cols <- list()

# create a list of all the columns in strawberry whose values are NA
for(i in 1:dim(strawberry)[2]) {
  if (is.na(strawberry_vals[[i]])[1]) {
    na_cols[length(na_cols) + 1] <- i
  }
}

# convert the list into a vector so that it can be used to remove the corresponding
# columns from the strawberry data
na_cols <- unlist(na_cols)

strawberry_clean <- strawberry[,-na_cols]
```

Another way to clean the data - create a function that drops all columns that only have one value.

```{r}
drop_one_val_col <- function(df){
  # browser() -> by uncommenting it can be used as the debugger in quarto
  drop <- NULL
  for(i in 1:dim(df)[2]){
    if ((df |> distinct(df[,i]) |> count()) == 1) {  
      drop = c(drop, i)
    }
  }
  
  if (is.null(drop)) {
    return("none")
  } else {
    print("Columns Dropped:")
    print(colnames(df)[drop])
    strawberry <- df[, -1*drop]
  }
}

# overwrite strawberry by dropping the columns that only have one value
strawberry <- strawberry |> drop_one_val_col()
```

Use a function to split the values in Data Items into their own columns.

```{r}
strawberry <- strawberry |>
  separate_wider_delim(cols = `Data Item`,
                       delim = ",",
                       names = c("Fruit",
                                 "Category",
                                 "Item",
                                 "Metric"),
                       too_many = "error",
                       too_few = "align_start")

# need to add code to trim leading and trailing white spaces

```

Create a new set that separates the Fruit columns into either STRAWBERRIES or STRAWBERRIES - APPLICATIONS.

```{r}
unique(strawberry$Fruit)

spr <- which((strawberry$Fruit == "STRAWBERRIES - APPLICATIONS"))

strw_apps <- strawberry |> slice(spr) # only the rows w/ STRAWBERRIES - APPLICATIONS
```

Need to create function that will continue to separate the split Data Items columns. Some rows have AVG under Item and Metric so function needs to be written to move those rows with AVG under one column to another.